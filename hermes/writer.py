"""Write digest files in various formats."""

import logging
from collections import defaultdict
from datetime import datetime
from pathlib import Path
from typing import Dict, List

from .config import DIGEST_DIR
from .fetcher import NewsArticle

logger = logging.getLogger(__name__)


def write_digest(articles: List[NewsArticle], format_type: str = "markdown") -> Path:
    """
    Write articles to a digest file.
    
    Args:
        articles: List of NewsArticle objects to write.
        format_type: Output format ("markdown", "html", "json").
        
    Returns:
        Path to the created digest file.
    """
    # Group articles by category
    categorized = _group_by_category(articles)
    
    # Generate filename with today's date
    today = datetime.utcnow().strftime("%Y-%m-%d")
    
    if format_type == "markdown":
        return _write_markdown_digest(categorized, today)
    elif format_type == "html":
        return _write_html_digest(categorized, today)
    elif format_type == "json":
        return _write_json_digest(categorized, today)
    else:
        raise ValueError(f"Unsupported format: {format_type}")


def _group_by_category(articles: List[NewsArticle]) -> Dict[str, List[NewsArticle]]:
    """Group articles by their assigned category."""
    categorized = defaultdict(list)
    
    for article in articles:
        category = article.category or "üì∞ Other"
        categorized[category].append(article)
    
    return dict(categorized)


def _write_markdown_digest(categorized: Dict[str, List[NewsArticle]], date: str) -> Path:
    """Write digest in Markdown format."""
    filepath = DIGEST_DIR / f"{date}.md"
    
    lines = [
        f"# üóûÔ∏è Hermes Daily Digest ‚Äî {date}",
        "",
        f"*Generated on {datetime.utcnow().strftime('%Y-%m-%d at %H:%M UTC')}*",
        "",
        "---",
        ""
    ]
    
    # Sort categories for consistent ordering
    sorted_categories = sorted(categorized.keys())
    
    for category in sorted_categories:
        articles = categorized[category]
        lines.append(f"## {category}")
        lines.append("")
        
        for article in articles:
            lines.append(f"### {article.title}")
            
            if article.bullets:
                for bullet in article.bullets:
                    lines.append(f"- {bullet}")
            else:
                # Fallback to summary if no bullets
                lines.append(f"- {article.summary}")
            
            if article.link:
                lines.append(f"")
                lines.append(f"[Read full article ‚Üí]({article.link})")
            
            lines.append("")
        
        lines.append("---")
        lines.append("")
    
    # Add footer
    lines.extend([
        f"*Digest contains {sum(len(articles) for articles in categorized.values())} articles from {len(categorized)} categories.*",
        "",
        "Generated by [Project Hermes](https://github.com/BenWassa/Hermes)"
    ])
    
    content = "\n".join(lines)
    filepath.write_text(content, encoding="utf-8")
    
    logger.info(f"Markdown digest written to: {filepath}")
    return filepath


def _write_html_digest(categorized: Dict[str, List[NewsArticle]], date: str) -> Path:
    """Write digest in HTML format."""
    filepath = DIGEST_DIR / f"{date}.html"
    
    html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hermes Daily Digest ‚Äî {date}</title>
    <style>
        body {{ font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; 
               max-width: 800px; margin: 0 auto; padding: 20px; line-height: 1.6; }}
        h1 {{ color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }}
        h2 {{ color: #34495e; margin-top: 30px; }}
        h3 {{ color: #2c3e50; margin-bottom: 10px; }}
        ul {{ margin-bottom: 15px; }}
        .meta {{ color: #7f8c8d; font-style: italic; }}
        .read-more {{ color: #3498db; text-decoration: none; }}
        .category {{ border-left: 4px solid #3498db; padding-left: 15px; margin-bottom: 30px; }}
    </style>
</head>
<body>
    <h1>üóûÔ∏è Hermes Daily Digest ‚Äî {date}</h1>
    <p class="meta">Generated on {datetime.utcnow().strftime('%Y-%m-%d at %H:%M UTC')}</p>
    <hr>
"""
    
    sorted_categories = sorted(categorized.keys())
    
    for category in sorted_categories:
        articles = categorized[category]
        html_content += f'    <div class="category">\n        <h2>{category}</h2>\n'
        
        for article in articles:
            html_content += f'        <h3>{article.title}</h3>\n        <ul>\n'
            
            if article.bullets:
                for bullet in article.bullets:
                    html_content += f'            <li>{bullet}</li>\n'
            else:
                html_content += f'            <li>{article.summary}</li>\n'
            
            html_content += '        </ul>\n'
            
            if article.link:
                html_content += f'        <p><a href="{article.link}" class="read-more">Read full article ‚Üí</a></p>\n'
            
            html_content += '\n'
        
        html_content += '    </div>\n'
    
    html_content += f"""    <hr>
    <p class="meta">Digest contains {sum(len(articles) for articles in categorized.values())} articles from {len(categorized)} categories.</p>
    <p class="meta">Generated by <a href="https://github.com/BenWassa/Hermes">Project Hermes</a></p>
</body>
</html>"""
    
    filepath.write_text(html_content, encoding="utf-8")
    
    logger.info(f"HTML digest written to: {filepath}")
    return filepath


def _write_json_digest(categorized: Dict[str, List[NewsArticle]], date: str) -> Path:
    """Write digest in JSON format."""
    import json
    
    filepath = DIGEST_DIR / f"{date}.json"
    
    data = {
        "date": date,
        "generated_at": datetime.utcnow().isoformat(),
        "categories": {}
    }
    
    for category, articles in categorized.items():
        data["categories"][category] = [
            {
                "title": article.title,
                "summary": article.summary,
                "link": article.link,
                "bullets": article.bullets or []
            }
            for article in articles
        ]
    
    data["total_articles"] = sum(len(articles) for articles in categorized.values())
    data["total_categories"] = len(categorized)
    
    with filepath.open("w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    
    logger.info(f"JSON digest written to: {filepath}")
    return filepath
